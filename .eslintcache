[{"D:\\app-ideia\\border-radius-previewer\\src\\index.tsx":"1","D:\\app-ideia\\border-radius-previewer\\src\\App.tsx":"2","D:\\app-ideia\\border-radius-previewer\\src\\routes\\index.tsx":"3","D:\\app-ideia\\border-radius-previewer\\src\\pages\\BorderRadius\\index.tsx":"4","D:\\app-ideia\\border-radius-previewer\\src\\styles\\global.ts":"5","D:\\app-ideia\\border-radius-previewer\\src\\pages\\BorderRadius\\styles.ts":"6"},{"size":208,"mtime":1611080524989,"results":"7","hashOfConfig":"8"},{"size":314,"mtime":1611080987017,"results":"9","hashOfConfig":"8"},{"size":274,"mtime":1611081112948,"results":"10","hashOfConfig":"8"},{"size":22281,"mtime":1611769407645,"results":"11","hashOfConfig":"8"},{"size":579,"mtime":1611535161163,"results":"12","hashOfConfig":"8"},{"size":3882,"mtime":1611768954772,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1nimhe4",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\app-ideia\\border-radius-previewer\\src\\index.tsx",[],["28","29","30","31","32"],"D:\\app-ideia\\border-radius-previewer\\src\\App.tsx",[],"D:\\app-ideia\\border-radius-previewer\\src\\routes\\index.tsx",[],"D:\\app-ideia\\border-radius-previewer\\src\\pages\\BorderRadius\\index.tsx",["33"],"import React, {\n    useCallback,\n    useState,\n    MouseEvent,\n    useMemo,\n    useRef,\n} from 'react';\n\nimport { Container, Photo, Title, Result } from './styles';\n\ninterface ISelected {\n    isSelected: boolean;\n    item: string;\n}\n\nconst BorderRadius: React.FC = () => {\n    const [selected, setSelect] = useState<ISelected>({} as ISelected);\n\n    const [mouseTopXLeft, setMouseTopXLeft] = useState(-16);\n    const [topLeftRX, setTopLeftRX] = useState(0);\n\n    const [mouseTopYRight, setMouseTopYRight] = useState(-16);\n    const [topRightRY, setTopRightRY] = useState(0);\n\n    const [mouseBottomYRight, setMouseBottomYRight] = useState(-16);\n    const [bottomRightRY, setBottomRightRY] = useState(0);\n\n    const [mouseBottomXLeft, setMouseBottomXLeft] = useState(-16);\n    const [bottomLeftRX, setBottomLeftRX] = useState(0);\n\n    const [topLeftRY, setTopLeftRY] = useState(0);\n    const [mouseTopYLeft, setMouseTopYLeft] = useState(-16);\n\n    const [mouseBottomYLeft, setMouseBottomYLeft] = useState(-16);\n    const [bottomLeftRY, setBottomLeftRY] = useState(0);\n\n    const [mouseTopXRight, setMouseTopXRight] = useState(-16);\n    const [topRightRX, setTopRightRX] = useState(0);\n\n    const [mouseBottomXRight, setMouseBottomXRight] = useState(-16);\n    const [bottomRightRX, setBottomRightRX] = useState(0);\n\n    const ref = useRef<HTMLInputElement>(null);\n\n    const handleMouseDown = useCallback((item: string) => {\n        setSelect({ isSelected: true, item });\n    }, []);\n\n    const handleMouseUp = useCallback(() => {\n        setSelect({ isSelected: false, item: '' });\n    }, []);\n\n    const handleSetMouseTopLeftX = useCallback(\n        (e: React.FormEvent<HTMLInputElement>) => {\n            e.currentTarget.maxLength = 3;\n            let { value } = e.currentTarget;\n\n            value = value.replace(/\\D/g, '');\n\n            if (Number(value) < 0) {\n                value = '0';\n            }\n\n            if (Number(value) > 100) {\n                value = '100';\n            }\n\n            e.currentTarget.value = value;\n            setTopLeftRX(Number(value));\n            setMouseTopXLeft((380 * Number(value)) / 100 - 16);\n        },\n        [],\n    );\n\n    const handleSetMouseTopRightX = useCallback(\n        (e: React.FormEvent<HTMLInputElement>) => {\n            e.currentTarget.maxLength = 3;\n            let { value } = e.currentTarget;\n\n            value = value.replace(/\\D/g, '');\n\n            if (Number(value) < 0) {\n                value = '0';\n            }\n\n            if (Number(value) > 100) {\n                value = '100';\n            }\n\n            e.currentTarget.value = value;\n            setTopRightRX(Number(value));\n            setMouseTopXRight((380 * Number(value)) / 100 - 16);\n        },\n        [],\n    );\n\n    const handleSetMouseBottomLeftX = useCallback(\n        (e: React.FormEvent<HTMLInputElement>) => {\n            e.currentTarget.maxLength = 3;\n            let { value } = e.currentTarget;\n\n            value = value.replace(/\\D/g, '');\n\n            if (Number(value) < 0) {\n                value = '0';\n            }\n\n            if (Number(value) > 100) {\n                value = '100';\n            }\n\n            e.currentTarget.value = value;\n            setBottomLeftRX(Number(value));\n            setMouseBottomXLeft((380 * Number(value)) / 100 - 16);\n        },\n        [],\n    );\n\n    const handleSetMouseBottomRightX = useCallback(\n        (e: React.FormEvent<HTMLInputElement>) => {\n            e.currentTarget.maxLength = 3;\n            let { value } = e.currentTarget;\n\n            value = value.replace(/\\D/g, '');\n\n            if (Number(value) < 0) {\n                value = '0';\n            }\n\n            if (Number(value) > 100) {\n                value = '100';\n            }\n\n            e.currentTarget.value = value;\n            setBottomRightRX(Number(value));\n            setMouseBottomXRight((380 * Number(value)) / 100 - 16);\n        },\n        [],\n    );\n\n    const handleSetMousetopRightY = useCallback(\n        (e: React.FormEvent<HTMLInputElement>) => {\n            e.currentTarget.maxLength = 3;\n            let { value } = e.currentTarget;\n\n            value = value.replace(/\\D/g, '');\n\n            if (Number(value) < 0) {\n                value = '0';\n            }\n\n            if (Number(value) > 100) {\n                value = '100';\n            }\n\n            e.currentTarget.value = value;\n            setTopRightRY(Number(value));\n            setMouseTopYRight((380 * Number(value)) / 100 - 16);\n        },\n        [],\n    );\n\n    const handleSetMouseBottomRightY = useCallback(\n        (e: React.FormEvent<HTMLInputElement>) => {\n            e.currentTarget.maxLength = 3;\n            let { value } = e.currentTarget;\n\n            value = value.replace(/\\D/g, '');\n\n            if (Number(value) < 0) {\n                value = '0';\n            }\n\n            if (Number(value) > 100) {\n                value = '100';\n            }\n\n            e.currentTarget.value = value;\n            setBottomRightRY(Number(value));\n            setMouseBottomYRight((380 * Number(value)) / 100 - 16);\n        },\n        [],\n    );\n\n    const handleSetMousetopLeftY = useCallback(\n        (e: React.FormEvent<HTMLInputElement>) => {\n            e.currentTarget.maxLength = 3;\n            let { value } = e.currentTarget;\n\n            value = value.replace(/\\D/g, '');\n\n            if (Number(value) < 0) {\n                value = '0';\n            }\n\n            if (Number(value) > 100) {\n                value = '100';\n            }\n\n            e.currentTarget.value = value;\n            setTopLeftRY(Number(value));\n            setMouseTopYLeft((380 * Number(value)) / 100 - 16);\n        },\n        [],\n    );\n\n    const handleSetMouseBottomLeftY = useCallback(\n        (e: React.FormEvent<HTMLInputElement>) => {\n            e.currentTarget.maxLength = 3;\n            let { value } = e.currentTarget;\n\n            value = value.replace(/\\D/g, '');\n\n            if (Number(value) < 0) {\n                value = '0';\n            }\n\n            if (Number(value) > 100) {\n                value = '100';\n            }\n\n            e.currentTarget.value = value;\n            setBottomLeftRY(Number(value));\n            setMouseBottomYLeft((380 * Number(value)) / 100 - 16);\n        },\n        [],\n    );\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<HTMLDivElement>) => {\n            if (selected.isSelected) {\n                if (selected.item === 'buttonTopLeftRX') {\n                    let offsetLeft = 0;\n\n                    if (event.currentTarget.parentElement?.offsetLeft) {\n                        offsetLeft =\n                            event.currentTarget.parentElement?.offsetLeft;\n                    }\n\n                    let mouseX = event.pageX - offsetLeft - 50;\n                    const width = event.currentTarget.clientWidth;\n\n                    if (mouseX < 0) {\n                        mouseX = 0;\n                    }\n                    if (mouseX >= width) {\n                        mouseX = width;\n                    }\n\n                    const percent = Math.floor((mouseX / width) * 100);\n                    setTopLeftRX(percent);\n\n                    setMouseTopXLeft(mouseX - 16);\n                }\n\n                if (selected.item === 'buttonBottomLeftRX') {\n                    let offsetLeft = 0;\n\n                    if (event.currentTarget.parentElement?.offsetLeft) {\n                        offsetLeft =\n                            event.currentTarget.parentElement?.offsetLeft;\n                    }\n\n                    let mouseX = event.pageX - offsetLeft - 50;\n                    const width = event.currentTarget.clientWidth;\n\n                    if (mouseX < 0) {\n                        mouseX = 0;\n                    }\n                    if (mouseX >= width) {\n                        mouseX = width;\n                    }\n\n                    const percent = Math.floor((mouseX / width) * 100);\n                    setBottomLeftRX(percent);\n\n                    setMouseBottomXLeft(mouseX - 16);\n                }\n\n                if (selected.item === 'buttonTopRightRX') {\n                    let offsetLeft = 0;\n\n                    if (event.currentTarget.parentElement?.offsetLeft) {\n                        offsetLeft =\n                            event.currentTarget.parentElement?.offsetLeft;\n                    }\n\n                    let mouseX = offsetLeft + 430 - event.pageX;\n                    const width = event.currentTarget.clientWidth;\n\n                    if (mouseX < 0) {\n                        mouseX = 0;\n                    }\n                    if (mouseX >= width) {\n                        mouseX = width;\n                    }\n\n                    const percent = Math.floor((mouseX / width) * 100);\n                    setTopRightRX(percent);\n\n                    setMouseTopXRight(mouseX - 16);\n                }\n\n                if (selected.item === 'buttonBottomRightRX') {\n                    let offsetLeft = 0;\n\n                    if (event.currentTarget.parentElement?.offsetLeft) {\n                        offsetLeft =\n                            event.currentTarget.parentElement?.offsetLeft;\n                    }\n\n                    let mouseX = offsetLeft + 430 - event.pageX;\n                    const width = event.currentTarget.clientWidth;\n\n                    if (mouseX < 0) {\n                        mouseX = 0;\n                    }\n                    if (mouseX >= width) {\n                        mouseX = width;\n                    }\n\n                    const percent = Math.floor((mouseX / width) * 100);\n                    setBottomRightRX(percent);\n\n                    setMouseBottomXRight(mouseX - 16);\n                }\n\n                if (selected.item === 'buttonTopLeftRY') {\n                    let offsetTop = 0;\n\n                    if (event.currentTarget.parentElement?.offsetTop) {\n                        offsetTop =\n                            event.currentTarget.parentElement?.offsetTop;\n                    }\n\n                    let mouseY = event.pageY - offsetTop - 50;\n                    const height = event.currentTarget.clientHeight;\n\n                    if (mouseY < 0) {\n                        mouseY = 0;\n                    }\n                    if (mouseY >= height) {\n                        mouseY = height;\n                    }\n\n                    const percent = Math.floor((mouseY / height) * 100);\n                    setTopLeftRY(percent);\n\n                    setMouseTopYLeft(mouseY - 16);\n                }\n\n                if (selected.item === 'buttonTopRightRY') {\n                    let offsetTop = 0;\n\n                    if (event.currentTarget.parentElement?.offsetTop) {\n                        offsetTop =\n                            event.currentTarget.parentElement?.offsetTop;\n                    }\n\n                    let mouseY = event.pageY - offsetTop - 50;\n                    const height = event.currentTarget.clientHeight;\n\n                    if (mouseY < 0) {\n                        mouseY = 0;\n                    }\n                    if (mouseY >= height) {\n                        mouseY = height;\n                    }\n\n                    const percent = Math.floor((mouseY / height) * 100);\n                    setTopRightRY(percent);\n\n                    setMouseTopYRight(mouseY - 16);\n                }\n\n                if (selected.item === 'buttonBottomLeftRY') {\n                    let offsetTop = 0;\n\n                    if (event.currentTarget.parentElement?.offsetTop) {\n                        offsetTop =\n                            event.currentTarget.parentElement?.offsetTop;\n                    }\n\n                    let mouseY = offsetTop + 430 - event.pageY;\n                    const height = event.currentTarget.clientHeight;\n\n                    if (mouseY < 0) {\n                        mouseY = 0;\n                    }\n                    if (mouseY >= height) {\n                        mouseY = height;\n                    }\n\n                    const percent = Math.floor((mouseY / height) * 100);\n                    setBottomLeftRY(percent);\n\n                    setMouseBottomYLeft(mouseY - 16);\n                }\n\n                if (selected.item === 'buttonBottomRightRY') {\n                    let offsetTop = 0;\n\n                    if (event.currentTarget.parentElement?.offsetTop) {\n                        offsetTop =\n                            event.currentTarget.parentElement?.offsetTop;\n                    }\n\n                    let mouseY = offsetTop + 430 - event.pageY;\n                    const height = event.currentTarget.clientHeight;\n\n                    if (mouseY < 0) {\n                        mouseY = 0;\n                    }\n                    if (mouseY >= height) {\n                        mouseY = height;\n                    }\n\n                    const percent = Math.floor((mouseY / height) * 100);\n                    setBottomRightRY(percent);\n\n                    setMouseBottomYRight(mouseY - 16);\n                }\n            }\n        },\n        [selected],\n    );\n\n    const borderRadius = useMemo(() => {\n        const border = `${topLeftRX}% ${topRightRX}% ${bottomRightRX}% ${bottomLeftRX}% / ${topLeftRY}% ${topRightRY}% ${bottomRightRY}% ${bottomLeftRY}%`;\n        return border;\n    }, [\n        topLeftRX,\n        topRightRX,\n        bottomRightRX,\n        bottomLeftRX,\n        topLeftRY,\n        topRightRY,\n        bottomRightRY,\n        bottomLeftRY,\n    ]);\n\n    const handleCopy = useCallback(() => {\n        ref.current?.select();\n        document.execCommand('copy');\n\n        alert('Border Radius copiado');\n    }, []);\n\n    const handleReset = useCallback(() => {\n        setTopLeftRX(0);\n        setTopRightRY(0);\n        setBottomRightRY(0);\n        setBottomLeftRX(0);\n        setTopLeftRY(0);\n        setBottomLeftRY(0);\n        setTopRightRX(0);\n        setBottomRightRX(0);\n\n        setMouseTopXLeft(-16);\n        setMouseTopYRight(-16);\n        setMouseBottomYRight(-16);\n        setMouseBottomXLeft(-16);\n        setMouseTopYLeft(-16);\n        setMouseBottomYLeft(-16);\n        setMouseTopXRight(-16);\n        setMouseBottomXRight(-16);\n    }, []);\n\n    return (\n        <>\n            <Container onMouseUp={handleMouseUp}>\n                <Title>Border-radius Previewer</Title>\n\n                <div className=\"area-container\">\n                    <input\n                        type=\"text\"\n                        value={topLeftRX}\n                        className=\"input-top-left-x\"\n                        onChange={event => handleSetMouseTopLeftX(event)}\n                    />\n                    <input\n                        type=\"text\"\n                        value={topRightRX}\n                        className=\"input-top-right-x\"\n                        onChange={event => handleSetMouseTopRightX(event)}\n                    />\n                    <input\n                        type=\"text\"\n                        value={topRightRY}\n                        className=\"input-top-right-y\"\n                        onChange={event => handleSetMousetopRightY(event)}\n                    />\n                    <input\n                        type=\"text\"\n                        value={bottomRightRY}\n                        className=\"input-bottom-right-y\"\n                        onChange={event => handleSetMouseBottomRightY(event)}\n                    />\n                    <input\n                        type=\"text\"\n                        value={bottomRightRX}\n                        className=\"input-bottom-right-x\"\n                        onChange={event => handleSetMouseBottomRightX(event)}\n                    />\n                    <input\n                        type=\"text\"\n                        value={bottomLeftRX}\n                        className=\"input-bottom-left-x\"\n                        onChange={event => handleSetMouseBottomLeftX(event)}\n                    />\n                    <input\n                        type=\"text\"\n                        value={bottomLeftRY}\n                        className=\"input-bottom-left-y\"\n                        onChange={event => handleSetMouseBottomLeftY(event)}\n                    />\n                    <input\n                        type=\"text\"\n                        value={topLeftRY}\n                        className=\"input-top-left-y\"\n                        onChange={event => handleSetMousetopLeftY(event)}\n                    />\n\n                    <Photo borderRadius={borderRadius} />\n\n                    <div\n                        className=\"bar bar-horizontal bar-top\"\n                        onMouseMove={event => handleMouseMove(event)}\n                    >\n                        <div className=\"bar-container\">\n                            <button\n                                type=\"button\"\n                                onMouseDown={() =>\n                                    handleMouseDown('buttonTopLeftRX')\n                                }\n                                onMouseUp={handleMouseUp}\n                                style={{ left: mouseTopXLeft, top: -14 }}\n                            >\n                                0\n                            </button>\n                            <button\n                                type=\"button\"\n                                onMouseDown={() =>\n                                    handleMouseDown('buttonTopRightRX')\n                                }\n                                onMouseUp={handleMouseUp}\n                                style={{ right: mouseTopXRight, top: -14 }}\n                            >\n                                0\n                            </button>\n                        </div>\n                    </div>\n\n                    <div\n                        className=\"bar bar-vertical bar-right\"\n                        onMouseMove={event => handleMouseMove(event)}\n                    >\n                        <div className=\"bar-container\">\n                            <button\n                                type=\"button\"\n                                onMouseDown={() =>\n                                    handleMouseDown('buttonTopRightRY')\n                                }\n                                onMouseUp={handleMouseUp}\n                                style={{ top: mouseTopYRight, right: -14 }}\n                            >\n                                0\n                            </button>\n\n                            <button\n                                type=\"button\"\n                                onMouseDown={() =>\n                                    handleMouseDown('buttonBottomRightRY')\n                                }\n                                onMouseUp={handleMouseUp}\n                                style={{\n                                    bottom: mouseBottomYRight,\n                                    right: -14,\n                                }}\n                            >\n                                0\n                            </button>\n                        </div>\n                    </div>\n\n                    <div\n                        className=\"bar bar-horizontal bar-bottom\"\n                        onMouseMove={event => handleMouseMove(event)}\n                    >\n                        <div className=\"bar-container\">\n                            <button\n                                type=\"button\"\n                                onMouseDown={() =>\n                                    handleMouseDown('buttonBottomLeftRX')\n                                }\n                                onMouseUp={handleMouseUp}\n                                style={{ left: mouseBottomXLeft, top: -14 }}\n                            >\n                                0\n                            </button>\n\n                            <button\n                                type=\"button\"\n                                onMouseDown={() =>\n                                    handleMouseDown('buttonBottomRightRX')\n                                }\n                                onMouseUp={handleMouseUp}\n                                style={{ right: mouseBottomXRight, top: -14 }}\n                            >\n                                0\n                            </button>\n                        </div>\n                    </div>\n\n                    <div\n                        className=\"bar bar-vertical bar-left\"\n                        onMouseMove={event => handleMouseMove(event)}\n                    >\n                        <div className=\"bar-container\">\n                            <button\n                                type=\"button\"\n                                onMouseDown={() =>\n                                    handleMouseDown('buttonTopLeftRY')\n                                }\n                                onMouseUp={handleMouseUp}\n                                style={{ top: mouseTopYLeft, left: -14 }}\n                            >\n                                0\n                            </button>\n\n                            <button\n                                type=\"button\"\n                                onMouseDown={() =>\n                                    handleMouseDown('buttonBottomLeftRY')\n                                }\n                                onMouseUp={handleMouseUp}\n                                style={{ bottom: mouseBottomYLeft, left: -14 }}\n                            >\n                                0\n                            </button>\n                        </div>\n                    </div>\n                </div>\n\n                <Result>\n                    <button type=\"button\" onClick={handleReset}>\n                        Resetar\n                    </button>\n                    <button type=\"button\" onClick={handleCopy}>\n                        Copiar\n                    </button>\n\n                    <input\n                        ref={ref}\n                        type=\"text\"\n                        value={`border-radius: ${borderRadius}`}\n                    />\n                </Result>\n            </Container>\n        </>\n    );\n};\n\nexport default BorderRadius;\n","D:\\app-ideia\\border-radius-previewer\\src\\styles\\global.ts",[],"D:\\app-ideia\\border-radius-previewer\\src\\pages\\BorderRadius\\styles.ts",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":446,"column":9,"nodeType":"46","messageId":"47","endLine":446,"endColumn":39},"lines-around-directive",["48"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-alert","Unexpected alert.","CallExpression","unexpected","padding-line-between-statements"]